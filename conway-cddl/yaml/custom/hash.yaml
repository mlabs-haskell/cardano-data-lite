Ed25519KeyHash:
  type: hash
  len: 28

ScriptHash:
  type: hash
  len: 28

ScriptHashes:
  type: array
  item: ScriptHash

AnchorDataHash:
  type: hash
  len: 32

TransactionHash:
  type: hash
  len: 32

GenesisDelegateHash:
  type: hash
  len: 28

GenesisHash:
  type: hash
  len: 28

GenesisHashes:
  type: array
  item: GenesisHash

AuxiliaryDataHash:
  type: hash
  len: 32

PoolMetadataHash:
  type: hash
  len: 32

VRFKeyHash:
  type: hash
  len: 32

BlockHash:
  type: hash
  len: 32

DataHash:
  type: hash
  len: 32

ScriptDataHash:
  type: hash
  len: 32

VRFVKey:
  type: hash
  len: 32

KESVKey:
  type: hash
  len: 32

Ed25519Signature:
  type: hash
  len: 64
  methods:
    to_bech32: null
    from_bech32: null
  extra_methods: |
    static _BECH32_HRP = "ed25519_sig";
    static from_bech32(bech_str: string): Ed25519Signature {
      let decoded = bech32.decode(bech_str, Number.MAX_SAFE_INTEGER);
      let words = decoded.words;
      let bytesArray = bech32.fromWords(words);
      let bytes = new Uint8Array(bytesArray);
      if(decoded.prefix==Ed25519Signature._BECH32_HRP) {
        return new Ed25519Signature(bytes);
      } else {
        throw new Error("Invalid prefix for Ed25519Signature: " + decoded.prefix);
      }
    }

    to_bech32() {
      let prefix = Ed25519Signature._BECH32_HRP;
      return bech32.encode(prefix, bech32.toWords(this.inner), Number.MAX_SAFE_INTEGER);
    }

KESSignature:
  type: newtype
  item: bytes
  accessor: toJsValue
  constraints:
    len:
      eq: 448
