Redeemers:
  type: union
  variants:
    - tag: 0
      peek_type: "array"
      name: redeemers_array
      type: RedeemersArray
    - tag: 1
      peek_type: "map"
      name: redeemers_map
      type: RedeemersMap
  extra_methods: |
    total_ex_units(): ExUnits {
      let mems = BigNum.zero(),
        steps = BigNum.zero();
      switch(this.variant.kind) {
        case 0: {
          for (let i = 0; i < this.variant.value.len(); i++) {
            const item = this.variant.value.get(i);
            mems = mems.checked_add(item.ex_units().mem());
            steps = steps.checked_add(item.ex_units().steps());
          }
          break;
        }
        case 1: {
          const keys = this.variant.value.keys();
          for (let i = 0; i < keys.len(); i++) {
            const item = this.variant.value.get(keys.get(i)) as RedeemersValue;
            mems = mems.checked_add(item.ex_units().mem());
            steps = steps.checked_add(item.ex_units().steps());
          }
          break;
        }
      }
      return ExUnits.new(mems, steps);
    }

    static new(): Redeemers {
      return Redeemers.new_redeemers_map(RedeemersMap.new());
    }

    len(): number {
      return this.variant.value.len()
    }

    add(elem: Redeemer): void {
      switch(this.variant.kind) {
        case 0:
          this.variant.value.add(elem.redeemerArrayItem());
          break;
        case 1: {
          const r = elem.redeemerArrayItem();
          this.variant.value.insert(
            RedeemersKey.new(r.tag(), r.index()),
            RedeemersValue.new(r.data(), r.ex_units())
          );
          break;
        }
      }
    }

    get(index: number): Redeemer {
      switch(this.variant.kind) {
        case 0:
          return new Redeemer(this.variant.value.get(index));
        case 1: {
          const key = this.variant.value.keys().get(index);
          const r = this.variant.value.get(key);
          if (r === undefined) {
            throw('Unexpected undefined key in Redeemers');
          } else {
            return new Redeemer(RedeemersArrayItem.new(key.tag(), key.index(), r.data(), r.ex_units()));
          }
        }
      }
    }


# This class is only added for compliance with the CSL interface. It's not
# used directly in a serialized transaction.
Redeemer:
  type: newtype
  item: RedeemersArrayItem
  methods:
    new: null
  extra_methods: |
    static new(tag: RedeemerTag, index: BigNum, data: PlutusData, ex_units: ExUnits) {
      return new Redeemer(new RedeemersArrayItem(tag, index, data, ex_units));
    }
    tag(): RedeemerTag {
      return this.inner.tag();
    }
    index(): BigNum {
      return this.inner.index();
    }
    data(): PlutusData {
      return this.inner.data();
    }
    ex_units(): ExUnits {
      return this.inner.ex_units();
    }
  accessor: redeemerArrayItem

RedeemersArray:
  type: array
  item: RedeemersArrayItem

RedeemersArrayItem:
  type: record
  export: false
  fields:
    - name: tag
      type: RedeemerTag
    - name: index
      type: BigNum
    - name: data
      type: PlutusData
    - name: ex_units
      type: ExUnits

RedeemersMap:
  type: map
  key: RedeemersKey
  value: RedeemersValue
  keys_method_type: RedeemersKeys

RedeemersKeys:
  type: array
  item: RedeemersKey

RedeemersKey:
  type: record
  export: false
  fields:
    - name: tag
      type: RedeemerTag
    - name: index
      type: BigNum

RedeemersValue:
  type: record
  export: false
  fields:
    - name: data
      type: PlutusData
    - name: ex_units
      type: ExUnits
