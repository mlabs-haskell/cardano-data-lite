Redeemer:
  type: record
  fields:
    - name: tag
      type: RedeemerTag
    - name: index
      type: BigNum
    - name: data
      type: PlutusData
    - name: ex_units
      type: ExUnits

Redeemers:
  type: array
  item: Redeemer
  methods:
    serialize: null
    deserialize: null
  extra_methods: |
    total_ex_units(): ExUnits {
      let mems = BigNum.zero(), steps = BigNum.zero();
      for(let item of this.items) {
        mems = mems.checked_add(item.ex_units().mem());
        steps = steps.checked_add(item.ex_units().steps());
      }
      return ExUnits.new(mems, steps);
    }

    static deserialize(reader: CBORReader, path: string[]): Redeemers {
      if(reader.peekType(path) == 'array') {
        return Redeemers.deserializeArray(reader, path);
      } else if(reader.peekType(path) == 'map') {
        return Redeemers.deserializeMap(reader, path);
      }
      throw new Error("Expected either an array or a map (at " + path.join("/") + ")");
    }

    static deserializeArray(reader: CBORReader, path: string[]): Redeemers {
      let redeemers = Redeemers.new();
      reader.readArray((reader, idx) => {
        let item = RedeemersArrayItem.deserialize(reader, [...path, 'RedeemersArrayItem#' + idx]);
        redeemers.add(
          Redeemer.new(
            item.tag(),
            item.index(),
            item.data(),
            item.ex_units(),
          )
        )
      }, path);
      return redeemers;
    }

    static deserializeMap(reader: CBORReader, path: string[]): Redeemers {
      let redeemers = Redeemers.new();
      reader.readMap((reader, idx) => {
        let key = RedeemersKey.deserialize(reader, [...path, `RedeemersKey#${idx}`]);
        let value = RedeemersValue.deserialize(reader, [...path, `RedeemersValue#${idx}`]);
        redeemers.add(
            Redeemer.new(
              key.tag(),
              key.index(),
              value.data(),
              value.ex_units(),
            )
        )
      }, path);
      return redeemers;
    }

    serialize(writer: CBORWriter): void {
      writer.writeMap(this.items, (writer, redeemer) => {
        let key = RedeemersKey.new(redeemer.tag(), redeemer.index());
        let value = RedeemersValue.new(redeemer.data(), redeemer.ex_units());
        key.serialize(writer);
        value.serialize(writer);
      });
    }

RedeemersArrayItem:
  type: record
  export: false
  fields:
    - name: tag
      type: RedeemerTag
    - name: index
      type: BigNum
    - name: data
      type: PlutusData
    - name: ex_units
      type: ExUnits

RedeemersKey:
  type: record
  export: false
  fields:
    - name: tag
      type: RedeemerTag
    - name: index
      type: BigNum

RedeemersValue:
  type: record
  export: false
  fields:
    - name: data
      type: PlutusData
    - name: ex_units
      type: ExUnits
