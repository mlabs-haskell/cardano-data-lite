BigNum:
  type: newtype
  item: bigint
  accessor: toJsValue
  constraints:
    value:
      min: 0n
      max: BigNum._maxU64()
  methods:
    arbitrary: null
  extra_methods: |
    // Lifted from: https://doc.rust-lang.org/std/primitive.u64.html#associatedconstant.MAX
    static _maxU64(): bigint {
      return 18446744073709551615n;
    }

    static from_str(string: string): BigNum {
      return new BigNum(BigInt(string));
    }

    to_str(): string {
      return this.toJsValue().toString();
    }

    static zero(): BigNum {
      return new BigNum(0n);
    }

    static one(): BigNum {
      return new BigNum(1n);
    }

    is_zero(): boolean {
      return this.toJsValue() == 0n;
    }

    div_floor(other: BigNum): BigNum {
      let res = this.toJsValue() / other.toJsValue();
      return new BigNum(res);
    }

    checked_mul(other: BigNum): BigNum {
      let res = this.toJsValue() * other.toJsValue();
      if(res > BigNum._maxU64()) throw new Error("BigNum.checked_mul overflow")
      return new BigNum(res);
    }

    checked_add(other: BigNum): BigNum {
      let res = this.toJsValue() + other.toJsValue();
      if(res > BigNum._maxU64()) throw new Error("BigNum.checked_add overflow")
      return new BigNum(res);
    }

    checked_sub(other: BigNum): BigNum {
      let res = this.toJsValue() - other.toJsValue();
      if(res < 0n) throw new Error("BigNum.checked_sub overflow")
      return new BigNum(res);
    }

    clamped_sub(other: BigNum): BigNum {
      let res = this.toJsValue() - other.toJsValue();
      if(res < 0n) res = 0n;
      return new BigNum(res);
    }

    compare(rhs_value: BigNum): number {
      if(this.toJsValue() < rhs_value.toJsValue()) return -1;
      else if(this.toJsValue() == rhs_value.toJsValue()) return 0;
      else return 1;
    }

    less_than(rhs_value: BigNum): boolean {
      return this.toJsValue() < rhs_value.toJsValue();
    }

    static arbitrary(prng: RandomGenerator): BigNum {
      const n: bigint = prand.uniformBigIntDistribution(0n, BigNum._maxU64(), prng)[0]
      return new BigNum(n);
    }

    static max_value(): BigNum {
      return new BigNum(BigNum._maxU64());
    }

    static max(a: BigNum, b: BigNum): BigNum {
      if(a.toJsValue() > b.toJsValue()) return a;
      else return b;
    }

    static _from_number(x: number): BigNum {
      return new BigNum(BigInt(x))
    }

    _to_number(): number {
      return Number(this.toJsValue);
    }
