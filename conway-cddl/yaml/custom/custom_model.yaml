CostModel:
  type: array
  item: Int
  methods:
    add: null
  extra_methods: |
    set(operation: number, cost: Int): Int {
      const len = this.items.length;
      const idx = operation;

      // Fill in-between indexes with zeroes if the operation index is greater than the current length
      if (idx >= len) {
        for (let i = 0; i < (idx - len + 1); i++) {
          this.items.push(Int.new_i32(0));
        }
      }
      const old = this.items[idx];
      this.items[idx] = cost;

      // Return the old value - behaviour of CSL's Rust code.
      return old;
    }

Costmdls:
  type: map
  key: Language
  value: CostModel
  keys_method_type: Languages
  extra_methods: |
    retain_language_versions(languages: Languages): Costmdls {
      const result = new Costmdls([]);

      for (let i = 0; i < languages.len(); i++) {
        const lang = languages.get(i);
        const costModel = this.get(lang);
        if (costModel !== undefined) {
          result.insert(lang, costModel);
        }
      }
      return result;
    }

    language_views_encoding(): Uint8Array {
      // Compare two byte arrays lexicographically
      function compareBytes(a: Uint8Array, b: Uint8Array): number {
        const minLen = Math.min(a.length, b.length);
        for (let i = 0; i < minLen; i++) {
          if (a[i] < b[i]) return -1;
          if (a[i] > b[i]) return 1;
        }
        return a.length - b.length;
      }

      function keyLen(lang: Language): number {
        if (lang.kind() === LanguageKind.plutus_v1) {
          const w = new CBORWriter();
          w.writeBytes(lang.to_bytes());
          return w.getBytes().length;
        } else {
          return lang.to_bytes().length;
        }
      }

      const keys = this._items.map(([k, _]) => k);

      // keys must be in canonical ordering first
      keys.sort((lhs, rhs) => {
        const lhsLen = keyLen(lhs);
        const rhsLen = keyLen(rhs);
        if (lhsLen !== rhsLen) {
          return lhsLen - rhsLen;
        }
        return compareBytes(lhs.to_bytes(), rhs.to_bytes());
      });

      const writer = new CBORWriter();
      writer.writeMapTag(keys.length);

      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        const costModel = this.get(key);
        if (!costModel) {
          throw new Error(
            "No cost model found for key in language_views_encoding.",
          );
        }

        if (key.kind() === LanguageKind.plutus_v1) {
          writer.writeBytes(key.to_bytes());

          const subWriter = new CBORWriter();
          subWriter.writeArray(
            costModel["items"],
            (sw, costInt) => costInt.serialize(sw),
            false,
          );

          writer.writeBytes(subWriter.getBytes());
        } else {
          key.serialize(writer);
          costModel.serialize(writer);
        }
      }

      return writer.getBytes();
    }
