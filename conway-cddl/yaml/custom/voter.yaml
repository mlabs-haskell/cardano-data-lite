# ; Constitutional Committee Hot KeyHash: 0
# ; Constitutional Committee Hot ScriptHash: 1
# ; DRep KeyHash: 2
# ; DRep ScriptHash: 3
# ; StakingPool KeyHash: 4
# voter =
#   [ 0, addr_keyhash
#   // 1, scripthash
#   // 2, addr_keyhash
#   // 3, scripthash
#   // 4, addr_keyhash
#   ]
Voter: # TODO (custom serializer)
  type: tagged_record
  variants:
    - tag: 0
      name: constitutional_committee_hot_key_hash
      value: Ed25519KeyHash
      kind_name: ConstitutionalCommitteeHotKeyHash
    - tag: 1
      name: constitutional_committee_hot_script_hash
      value: ScriptHash
      kind_name: ConstitutionalCommitteeHotScriptHash
    - tag: 2
      name: drep_key_hash
      value: Ed25519KeyHash
      kind_name: DRepKeyHash
    - tag: 3
      name: drep_script_hash
      value: ScriptHash
      kind_name: DRepScriptHash
    - tag: 4
      name: staking_pool_key_hash
      value: Ed25519KeyHash
      kind_name: StakingPoolKeyHash
  accessor_prefix: to
  extra_methods: |
    has_script_credentials(): boolean {
      return (
        this.variant.kind == VoterKind.ConstitutionalCommitteeHotScriptHash 
        || this.variant.kind == VoterKind.DRepScriptHash
      );
    }

    to_key_hash(): Ed25519KeyHash | undefined {
      if (
        this.variant.kind == VoterKind.ConstitutionalCommitteeHotKeyHash 
        || this.variant.kind == VoterKind.DRepKeyHash
        || this.variant.kind == VoterKind.StakingPoolKeyHash
      ) {
        return this.variant.value;
      }
      return undefined;
    }

    static new_constitutional_committee_hot_credential(cred: Credential): Voter {
      if(cred.kind() == CredKind.Key) {
        return Voter.new_constitutional_committee_hot_key_hash(cred.to_keyhash()!);
      } else if(cred.kind() == CredKind.Script) {
        return Voter.new_constitutional_committee_hot_script_hash(cred.to_scripthash()!);
      } else {
        throw new Error("Invalid CredKind");
      }
    }

    static new_drep_credential(cred: Credential): Voter {
      if(cred.kind() == CredKind.Key) {
        return Voter.new_drep_key_hash(cred.to_keyhash()!);
      } else if(cred.kind() == CredKind.Script) {
        return Voter.new_drep_script_hash(cred.to_scripthash()!);
      } else {
        throw new Error("Invalid CredKind");
      }
    }

    to_constitutional_committee_hot_credential(): Credential | undefined {
      if(this.variant.kind == VoterKind.ConstitutionalCommitteeHotKeyHash) {
        return Credential.from_keyhash(this.variant.value);
      } else if (this.variant.kind == VoterKind.ConstitutionalCommitteeHotScriptHash) {
        return Credential.from_scripthash(this.variant.value);
      }
      return undefined;
    }

    to_drep_credential(): Credential | undefined {
      if(this.variant.kind == VoterKind.DRepKeyHash) {
        return Credential.from_keyhash(this.variant.value);
      } else if (this.variant.kind == VoterKind.DRepScriptHash) {
        return Credential.from_scripthash(this.variant.value);
      }
      return undefined;
    }
