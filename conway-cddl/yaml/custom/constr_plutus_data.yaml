ConstrPlutusData:
  type: record
  fields:
    - name: alternative
      type: BigNum
    - name: data
      type: PlutusList
  methods:
    deserialize: deserializeWithSeparateIdx
    serialize: serializeWithSeparateIdx
    new: uncheckedNew
  extra_methods: |
    static deserialize(reader: CBORReader, path: string[]): ConstrPlutusData {      
      let tag = Number(reader.readTaggedTagAsBigInt(path));
      if (tag >= 121 && tag <= 127) {
        tag = tag - 121;
        return ConstrPlutusData.new(
          BigNum.new(BigInt(tag)),
          PlutusList.deserialize(reader, [...path, "PlutusList(data)"]),
        );
      } else if (tag >= 1280 && tag <= 1400) {
        tag = tag - 1280 + 7; 
        return ConstrPlutusData.new(
          BigNum.new(BigInt(tag)),
          PlutusList.deserialize(reader, [...path, "PlutusList(data)"]),
        );
      } else if (tag == 102) {
        return ConstrPlutusData.deserializeWithSeparateIdx(reader, path);
      } else {
        throw new Error(
          "Unexpected tagfor ConstrPlutusData: " +
            tag +
            "(at " +
            path.join("/") +
            ")",
        );
      }
    }

    serialize(writer: CBORWriter): void {
      const alternative = Number(this.alternative().toJsValue());
      if (alternative < 0) {
        throw new Error("Alternative can't be negative");
      } else if (alternative <= 6) {
        writer.writeTaggedTag(alternative + 121);
        this.data().serialize(writer);
      } else if (alternative <= 127) {
        writer.writeTaggedTag(alternative - 7 + 1280);
        this.data().serialize(writer);
      } else {
        writer.writeTaggedTag(102);
        this.serializeWithSeparateIdx(writer);
      }
    }

    static new(alternative: BigNum, data: PlutusList): ConstrPlutusData {
      return ConstrPlutusData.uncheckedNew(alternative, data)
    }
    
