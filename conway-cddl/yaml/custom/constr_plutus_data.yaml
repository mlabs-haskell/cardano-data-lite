ConstrPlutusData:
  type: record
  fields:
    - name: alternative
      type: BigNum
    - name: data
      type: PlutusList
  methods:
    deserialize: deserializeWithSeparateIdx
    serialize: serializeWithSeparateIdx
    new: uncheckedNew
  extra_methods: |
    static deserialize(reader: CBORReader, path: string[]): ConstrPlutusData {      
      const alternative = reader.readTaggedTagAsBigInt(path);
      if (Number(alternative) >= 121 && Number(alternative) <= 127) {
        return ConstrPlutusData.new(BigNum.new(alternative), PlutusList.deserialize(reader, [...path, 'PlutusList(data)']))
      } else if (Number(alternative) == 102) {
        return ConstrPlutusData.deserializeWithSeparateIdx(reader, path);
      } else {
        throw new Error(
          "Unexpected alternative for ConstrPlutusData: " +
            alternative +
            "(at " +
            path.join("/") +
            ")",
        );
      }
    }

    serialize(writer: CBORWriter): void {
      const alternative = this.alternative().toJsValue();
      writer.writeTaggedTag(Number(alternative));
      if (alternative == 102n) {
        this.serializeWithSeparateIdx(writer)
      } else {
        this.data().serialize(writer);
      }
    }

    static new(alternative: BigNum, data: PlutusList): ConstrPlutusData {
      const alt = Number(alternative.toJsValue());
      if(alt != 102 && (alt < 121 || alt > 127)) {
        throw new Error(
          "Unexpected alternative for ConstrPlutusData: " + alternative
        );
      } else {
        return ConstrPlutusData.uncheckedNew(alternative, data);
      }
    }
    
