Mint:
  type: map
  key: ScriptHash
  value: MintAssets
  keys_method_type: ScriptHashes
  methods:
    get: null
  extra_methods: |
    get(key: ScriptHash): MintsAssets | undefined {
      let ret = MintsAssets.new();
      for(let [key_, value] of this._items) {
        if(arrayEq(key.to_bytes(), key_.to_bytes())) {
          ret.add(value);
        }
      }
      if(ret.len() != 0) return ret;
      return undefined;
    }

    _as_multiasset(isPositive: boolean): MultiAsset {
      const result = new MultiAsset([]);

      // Iterating over items in Mint class
      const mintItems = this._items;

      for (const [scriptHash, mintAssets] of mintItems) {
        const assets = new Assets([]);


        const mintAssetEntries = mintAssets.keys();

        for (let i = 0; i < mintAssetEntries.len(); i++) {
          const assetName = mintAssetEntries.get(i);
          const assetValue = mintAssets.get(assetName);

          if (assetValue === undefined) {
            throw new Error("assetValue is undefined");
          };

          if (assetValue > Int.new_i32(0) && isPositive) {
            const amount = isPositive ? assetValue.as_positive() : assetValue.as_negative();
            if (amount !== undefined) {
              assets.insert(assetName, amount);
            }
          }
        };

        if (assets.len() > 0) {
          result.insert(scriptHash, assets);
        }
      }

      return result;
    }

    as_positive_multiasset(): MultiAsset {
      return this._as_multiasset(true);
    }

    as_negative_multiasset(): MultiAsset {
      return this._as_multiasset(false);
    }

MintAssets:
  type: map
  key: AssetName
  value: Int
  keys_method_type: AssetNames

MintsAssets:
  type: array
  item: MintAssets
